name: Build database

on:
  push:
    branches: [main, tools]
    paths:
      - "libs/*"
      - "tools/*"
      - ".github/workflows/*"

jobs:
  libs:
    runs-on: ubuntu-latest
    container: devkitpro/devkitarm
    name: Update libs database
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install fakeroot -y
      - name: Import GPG key
        run: |
          echo '${{ secrets.GPG_PRIVATE_KEY }}' | GPG_TTY=$(tty) gpg --batch --import
          mkdir /nonexistent
          chown nobody /nonexistent
          echo '${{ secrets.GPG_PRIVATE_KEY }}' | sudo -u nobody gpg --batch --import
      - name: Build packages
        run: |
          cd libs
          chown -R nobody .
          for PACKAGE in */; do
            cd "$PACKAGE"
            sudo -u nobody DEVKITPRO=$DEVKITPRO DEVKITARM=$DEVKITARM dkp-makepkg -sr
            echo '${{ secrets.GPG_PASSPHRASE }}' | gpg --detach-sign --pinentry-mode loopback --passphrase-fd 0 *.pkg.tar.xz
            cd ..
          done
          chown -R root .
          mkdir /pkgtemp
          mv */*.pkg.tar.xz* /pkgtemp
      - name: Publish to Actions
        if: ${{ success() && !startsWith(github.ref, 'refs/pull') }}
        uses: actions/upload-artifact@v3
        with:
          path: /pkgtemp/*
          name: libs

  linux:
    runs-on: ubuntu-latest
    container: devkitpro/devkitarm
    name: Update linux database
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install tools
        run: sudo apt-get install automake fakeroot gcc -y
      - name: Import GPG key
        run: |
          echo '${{ secrets.GPG_PRIVATE_KEY }}' | GPG_TTY=$(tty) gpg --batch --import
          mkdir /nonexistent
          chown nobody /nonexistent
          echo '${{ secrets.GPG_PRIVATE_KEY }}' | sudo -u nobody gpg --batch --import
      - name: Build packages
        run: |
          cd tools
          chown -R nobody .
          for PACKAGE in */; do
            cd "$PACKAGE"
            sudo -u nobody DEVKITPRO=$DEVKITPRO DEVKITARM=$DEVKITARM dkp-makepkg -sr
            echo '${{ secrets.GPG_PASSPHRASE }}' | gpg --detach-sign --pinentry-mode loopback --passphrase-fd 0 *.pkg.tar.xz
            cd ..
          done
          chown -R root .
          mkdir /pkgtemp
          mv */*.pkg.tar.xz* /pkgtemp
      - name: Publish to Actions
        if: ${{ success() && !startsWith(github.ref, 'refs/pull') }}
        uses: actions/upload-artifact@v3
        with:
          path: /pkgtemp/*
          name: linux

  osx:
    runs-on: macos-latest
    name: Update osx database
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install tools
        run: |
          curl -LO https://github.com/devkitPro/pacman/releases/latest/download/devkitpro-pacman-installer.pkg
          sudo installer -pkg devkitpro-pacman-installer.pkg -target /
      - name: Import GPG key
        run: |
          echo '${{ secrets.GPG_PRIVATE_KEY }}' | GPG_TTY=$(tty) gpg --batch --import
          mkdir /nonexistent
          chown nobody /nonexistent
          echo '${{ secrets.GPG_PRIVATE_KEY }}' | sudo -u nobody gpg --batch --import
      - name: Build packages
        run: |
          cd tools
          chown -R nobody .
          for PACKAGE in */; do
            cd "$PACKAGE"
            sudo -u nobody DEVKITPRO=$DEVKITPRO DEVKITARM=$DEVKITARM dkp-makepkg -sr
            echo '${{ secrets.GPG_PASSPHRASE }}' | gpg --detach-sign --pinentry-mode loopback --passphrase-fd 0 *.pkg.tar.xz
            cd ..
          done
          chown -R root .
          mkdir /pkgtemp
          mv */*.pkg.tar.xz* /pkgtemp
      - name: Publish to Actions
        if: ${{ success() && !startsWith(github.ref, 'refs/pull') }}
        uses: actions/upload-artifact@v3
        with:
          path: /pkgtemp/*
          name: osx

  push:
    runs-on: ubuntu-latest
    container: devkitpro/devkitarm
    name: Push to repo
    needs: [libs, linux, osx]
    steps:
      - name: Checkout repo branch
        uses: actions/checkout@v3
        with:
          ref: repo
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: libs
          path: libs
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: linux
          path: linux
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: osx
          path: osx
      - name: Create database
        run: |
          mkdir -p {linux,osx}/x86_64
          rm -f {{linux,osx}/x86_64,.}/*.{db,sig,tar.gz,tar.xz,.tar.bz2,.tar.zstd}
          REPO=$(pwd)

          cd ${{ github.workspace }}/libs
          echo '${{ secrets.GPG_PASSPHRASE }}' | dkp-repo-add --verify --sign dsh-libs.db.tar.gz *.pkg.tar.xz
          mv * $REPO

          cd ${{ github.workspace }}/linux
          echo '${{ secrets.GPG_PASSPHRASE }}' | dkp-repo-add --verify --sign dsh-linux.db.tar.gz *.pkg.tar.xz
          mv * $REPO/linux/x86_64

          cd ${{ github.workspace }}/osx
          echo '${{ secrets.GPG_PASSPHRASE }}' | dkp-repo-add --verify --sign dsh-osx.db.tar.gz *.pkg.tar.xz
          mv * $REPO/osx/x86_64
      - name: Commit to repo
        run: |
          git config user.email "flamekat54@aol.com"
          git config user.name "TWLBot"

          echo "machine github.com" > "$HOME/.netrc"
          echo "  login TWLBot" >> "$HOME/.netrc"
          echo "  password ${{ secrets.GITHUB_TOKEN }}" >> "$HOME/.netrc"

          echo "machine api.github.com" >> "$HOME/.netrc"
          echo "  login TWLBot" >> "$HOME/.netrc"
          echo "  password ${{ secrets.GITHUB_TOKEN }}" >> "$HOME/.netrc"

          git stage .
          if git commit -m "Update package database"; then
            git push origin repo
          fi

