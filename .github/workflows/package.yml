name: Build database

on:
  push:
    branches: [main, tools]
    paths:
      - "libs/**"
      - "tools/**"
      - ".github/workflows/*"

jobs:
  libs:
    runs-on: ubuntu-latest
    container: devkitpro/devkitarm
    name: Update libs database
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install tools
        run: sudo apt-get install fakeroot -y
      - name: Import GPG key
        run: |
          echo '${{ secrets.GPG_PRIVATE_KEY }}' | GPG_TTY=$(tty) gpg --batch --import
          mkdir /nonexistent
          chown nobody /nonexistent
          echo '${{ secrets.GPG_PRIVATE_KEY }}' | sudo -u nobody gpg --batch --import
      - name: Build packages
        run: |
          cd libs
          chown -R nobody .
          for PACKAGE in */; do
            cd "$PACKAGE"
            sudo -u nobody DEVKITPRO=$DEVKITPRO DEVKITARM=$DEVKITARM dkp-makepkg -sr
            echo '${{ secrets.GPG_PASSPHRASE }}' | gpg --detach-sign --pinentry-mode loopback --passphrase-fd 0 *.pkg.tar.xz
            cd ..
          done
          chown -R root .
          mkdir /pkgtemp
          mv */*.pkg.tar.xz* /pkgtemp
      - name: Publish to Actions
        if: ${{ success() && !startsWith(github.ref, 'refs/pull') }}
        uses: actions/upload-artifact@v3
        with:
          path: /pkgtemp/*
          name: libs

  linux:
    runs-on: ubuntu-latest
    container: devkitpro/devkitarm
    name: Update linux database
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install automake fakeroot gcc -y
      - name: Import GPG key
        run: |
          echo '${{ secrets.GPG_PRIVATE_KEY }}' | GPG_TTY=$(tty) gpg --batch --import
          mkdir /nonexistent
          chown nobody /nonexistent
          echo '${{ secrets.GPG_PRIVATE_KEY }}' | sudo -u nobody gpg --batch --import
      - name: Build packages
        run: |
          cd tools
          chown -R nobody .
          for PACKAGE in */; do
            cd "$PACKAGE"
            sudo -u nobody DEVKITPRO=$DEVKITPRO DEVKITARM=$DEVKITARM dkp-makepkg -sr
            echo '${{ secrets.GPG_PASSPHRASE }}' | gpg --detach-sign --pinentry-mode loopback --passphrase-fd 0 *.pkg.tar.xz
            cd ..
          done
          chown -R root .
          mkdir /pkgtemp
          mv */*.pkg.tar.xz* /pkgtemp
      - name: Publish to Actions
        if: ${{ success() && !startsWith(github.ref, 'refs/pull') }}
        uses: actions/upload-artifact@v3
        with:
          path: /pkgtemp/*
          name: linux

  osx:
    runs-on: macos-latest
    name: Update osx database
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install tools
        run: |
          # curl -LO https://github.com/devkitPro/pacman/releases/latest/download/devkitpro-pacman-installer.pkg
          # sudo installer -pkg devkitpro-pacman-installer.pkg -target /
          curl -LO https://files.catbox.moe/oa324w.7z
          sudo 7z x -o/opt oa324w.7z
      - name: Import GPG key
        run: |
          echo '${{ secrets.GPG_PRIVATE_KEY }}' | GPG_TTY=$(tty) gpg --batch --import
          echo '${{ secrets.GPG_PRIVATE_KEY }}' | gpg --batch --import
      - name: Build packages
        run: |
          DEVKITPRO=/opt/devkitpro
          DEVKITARM=$DEVKITPRO/devkitARM
          PATH=$DEVKITPRO/pacman/bin:$PATH
          echo '#!/usr/bin/env bash
          exec /usr/bin/shasum -a256 "$@"' > /usr/local/bin/sha256sum
          sudo chmod +x /usr/local/bin/sha256sum

          cd tools
          for PACKAGE in */; do
            cd "$PACKAGE"
            DEVKITPRO=$DEVKITPRO DEVKITARM=$DEVKITARM makepkg -sr
            ls
            echo '${{ secrets.GPG_PASSPHRASE }}' | gpg --detach-sign --pinentry-mode loopback --passphrase-fd 0 *.pkg.tar.xz
            cd ..
          done
          mkdir ~/pkgtemp
          mv */*.pkg.tar.xz* ~/pkgtemp
      - name: Publish to Actions
        if: ${{ success() && !startsWith(github.ref, 'refs/pull') }}
        uses: actions/upload-artifact@v3
        with:
          path: ~/pkgtemp/*
          name: osx

  windows:
    runs-on: windows-latest
    name: Update windows database
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup msys2
        uses: msys2/setup-msys2@v2
      - name: Install tools
        shell: msys2 {0}
        run: pacman --noconfirm -S gcc
      - name: Import GPG key
        shell: msys2 {0}
        run: |
          echo '${{ secrets.GPG_PRIVATE_KEY }}' | GPG_TTY=$(tty) gpg --batch --import
          echo '${{ secrets.GPG_PRIVATE_KEY }}' | gpg --batch --import
      - name: Build packages
        shell: msys2 {0}
        run: |
          cd tools
          for PACKAGE in */; do
            cd "$PACKAGE"
            DEVKITPRO=$DEVKITPRO DEVKITARM=$DEVKITARM makepkg -sr
            echo '${{ secrets.GPG_PASSPHRASE }}' | gpg --detach-sign --pinentry-mode loopback --passphrase-fd 0 *.pkg.tar.xz
            cd ..
          done
          mkdir ~/pkgtemp
          mv */*.pkg.tar.xz* ~/pkgtemp
      - name: Publish to Actions
        if: ${{ success() && !startsWith(github.ref, 'refs/pull') }}
        uses: actions/upload-artifact@v3
        with:
          path: ~/pkgtemp/*
          name: windows

  push:
    runs-on: ubuntu-latest
    container: devkitpro/devkitarm
    name: Push to repo
    needs: [libs, linux, osx, windows]
    steps:
      - name: Checkout repo branch
        uses: actions/checkout@v3
        with:
          ref: repo
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: libs
          path: ~/downloads/libs
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: linux
          path: ~/downloads/linux
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: osx
          path: ~/downloads/osx
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows
          path: ~/downloads/windows
      - name: Create database
        shell: bash
        run: |
          REPO=$(pwd)
          rm -f {{linux,osx,windows}/x86_64,.}/*.{db,sig,tar.gz,tar.xz,.tar.bz2,.tar.zstd}
          mkdir -p {linux,osx,windows}/x86_64
          ls

          cd ~/downloads/libs
          echo '${{ secrets.GPG_PASSPHRASE }}' | dkp-repo-add --verify --sign dsh-libs.db.tar.gz *.pkg.tar.xz
          mv * $REPO

          cd ~/downloads/linux
          echo '${{ secrets.GPG_PASSPHRASE }}' | dkp-repo-add --verify --sign dsh-linux.db.tar.gz *.pkg.tar.xz
          ls $REPO
          ls $REPO/linux
          mv * $REPO/linux/x86_64

          cd ~/downloads/osx
          echo '${{ secrets.GPG_PASSPHRASE }}' | dkp-repo-add --verify --sign dsh-osx.db.tar.gz *.pkg.tar.xz
          mv * $REPO/osx/x86_64

          cd ~/downloads/windows
          echo '${{ secrets.GPG_PASSPHRASE }}' | dkp-repo-add --verify --sign dsh-windows.db.tar.gz *.pkg.tar.xz
          mv * $REPO/windows/x86_64
      - name: Commit to repo
        run: |
          git config user.email "flamekat54@aol.com"
          git config user.name "TWLBot"

          echo "machine github.com" > "$HOME/.netrc"
          echo "  login TWLBot" >> "$HOME/.netrc"
          echo "  password ${{ secrets.GITHUB_TOKEN }}" >> "$HOME/.netrc"

          echo "machine api.github.com" >> "$HOME/.netrc"
          echo "  login TWLBot" >> "$HOME/.netrc"
          echo "  password ${{ secrets.GITHUB_TOKEN }}" >> "$HOME/.netrc"

          git stage .
          if git commit -m "Update package database"; then
            git push origin repo
          fi
